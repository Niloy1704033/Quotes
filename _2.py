# -*- coding: utf-8 -*-
"""@2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ba6Z6AffXnwByJ0DgF-Nsu99hq_sj2T1
"""

!pip install --upgrade transformers datasets scikit-learn

from google.colab import files
uploaded = files.upload()

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Load CSV
df = pd.read_csv("motivational_quotes_dataset.csv")

# Rename columns for convenience
df = df.rename(columns={
    "Input Text (Emotion/Intent)": "text",
    "Output Text (Motivational Quote)": "quote"
})

# Encode quotes into numeric labels
label_encoder = LabelEncoder()
df["label"] = label_encoder.fit_transform(df["quote"])

from datasets import Dataset
from transformers import BertTokenizer

# Convert to Hugging Face Dataset
dataset = Dataset.from_pandas(df[["text", "label"]])
dataset = dataset.train_test_split(test_size=0.3)

# Load tokenizer
tokenizer = BertTokenizer.from_pretrained("bert-base-multilingual-cased")

# Tokenization
def tokenize(example):
    return tokenizer(example["text"], padding="max_length", truncation=True, max_length=64)

tokenized_dataset = dataset.map(tokenize)

import os
import numpy as np
from transformers import BertForSequenceClassification, TrainingArguments, Trainer
from sklearn.metrics import accuracy_score

# Disable Weights & Biases
os.environ["WANDB_DISABLED"] = "true"

# Load mBERT model with classification head
model = BertForSequenceClassification.from_pretrained(
    "bert-base-multilingual-cased",
    num_labels=len(label_encoder.classes_)
)

# Accuracy metric
def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    return {"accuracy": accuracy_score(labels, predictions)}

# âœ… Fixed TrainingArguments (no evaluation_strategy)
training_args = TrainingArguments(
    output_dir="./results",
    num_train_epochs=5,
    per_device_train_batch_size=4,
    per_device_eval_batch_size=4,
    learning_rate=2e-5,
    logging_dir="./logs"
)

# Define trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_dataset["train"],
    eval_dataset=tokenized_dataset["test"],
    tokenizer=tokenizer,
    compute_metrics=compute_metrics
)

trainer.train()

import torch

def predict_quote(text):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=64)
    outputs = model(**inputs)
    predicted_class = torch.argmax(outputs.logits, dim=1).item()
    return label_encoder.inverse_transform([predicted_class])[0]


user_input = input("ðŸ’¬ Enter how you're feeling: ")
result = predict_quote(user_input)
print(result)